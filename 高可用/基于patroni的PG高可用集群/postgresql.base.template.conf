# -----------------------------
# PostgreSQL configuration file
# Patroni控制的参数保存在DCS中，同时会dump到postgresql.conf
# postgresql.conf文件不要编辑修改
# postgresql.base.conf文件保存除DCS中以外的PG参数
# -----------------------------

#data_directory = 'ConfigDir'                    不需要配置，patroni配置文件中指定
#hba_file = 'ConfigDir/pg_hba.conf'	             默认，不需要配置
#listen_addresses = '0.0.0.0'                    patroni.yml中配置	
	
superuser_reserved_connections = 10
unix_socket_directories = '/tmp'
unix_socket_permissions = 0700
#authentication_timeout = 1min                  默认值为1min,不需要调整
#ssl = off                                      默认为off，不需要调整
tcp_keepalives_idle = 60
tcp_keepalives_interval = 10
tcp_keepalives_count = 10

temp_buffers = 128MB

shared_preload_libraries = 'pg_stat_statements,auto_explain,pgsentinel,pg_squeeze'   
#max_files_per_process = 1000                  默认值为1000，不需要修改
#max_locks_per_transaction = 64                DCS中配置	
temp_file_limit = 15GB
#track_io_timing = off
track_functions = pl	
track_activity_query_size = 10240	    

pg_stat_statements.max = 10000                # 在pg_stat_statements中最多保留多少条统计信息，通过LRU算法，覆盖老的记录。  
pg_stat_statements.track = all                # all - (所有SQL包括函数内嵌套的SQL), top - 直接执行的SQL(函数内的sql不被跟踪), none - (不跟踪)
pg_stat_statements.track_utility = on         # 是否跟踪非DML语句 (例如DDL，DCL)，on表示跟踪, off表示不跟踪  
pg_stat_statements.save = on                  # 重启后是否保留统计信息  

auto_explain.log_min_duration = '1s'
auto_explain.log_nested_statements =on   

#max_worker_processes = 256		              DCS配置
bgwriter_delay = 20ms			       

#wal_level = replica			              DCS中配置
wal_compression = on			 
fsync = on				     
synchronous_commit = local		 
wal_buffers = 16MB

#checkpoint_completion_target = 0.5	          默认值为 0.5，不需要修改
#checkpoint_warning = 30s		              默认值为 30s，不需要修改

archive_mode = on		                    
archive_command = 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
archive_timeout = '5min'		 
				
#cluster_name = 'pcfcrs'			    在patroni.yml中配置

#max_wal_senders = 64                   DCS中配置
#wal_keep_segments = 10		            DCS中配置***
#hot_standby = on			            patroni默认打开，不需要配置

#max_replication_slots = 10	            DCS中配置 
#track_commit_timestamp = off	        DCS中配置
log_destination = 'csvlog'		
logging_collector = on			
log_directory = 'log'
log_filename = 'postgresql-%d.log'	
log_truncate_on_rotation = on		
log_line_prefix = '%t:%r:%u@%d:[%p]: '		
log_statement = 'ddl'			
log_checkpoints = on
log_connections = on
log_disconnections = on

log_min_duration_statement = 1000	
log_lock_waits = on
log_timezone = 'PRC'     
log_autovacuum_min_duration = 1000	
  
datestyle = 'iso, mdy'
timezone = 'PRC'        
lc_messages = 'en_US.UTF-8'			# locale for system error message
lc_monetary = 'en_US.UTF-8'			# locale for monetary formatting
lc_numeric = 'en_US.UTF-8'			# locale for number formatting
lc_time = 'en_US.UTF-8'				# locale for time formatting
default_text_search_config = 'pg_catalog.english'
      
random_page_cost = 1.1                 # 离散IO很好的机器（例如ssd, nvme ssd），不需要考虑离散和顺序扫描的成本差异 
search_path = '"$user", public'	# schema names
# 如果要使用pg_rewind，flashback 时间线，需要打开这个功能    
# [《PostgreSQL pg_rewind，时间线修复，脑裂修复，flashback - 从库开启读写后，回退为只读从库。异步主从发生角色切换后，主库rewind为新主库的从库》](201901/20190128_02.md)      
##wal_log_hints = on                      DCS中配置

autovacuum_max_workers = 5		# max number of autovacuum subprocesses
vacuum_freeze_table_age = 1500000000
vacuum_multixact_freeze_table_age = 1500000000
old_snapshot_threshold = 3h		# 1min-60d; -1 disables; 0 is immediate
autovacuum_vacuum_cost_limit = 1000	# default vacuum cost limit for
autovacuum_vacuum_cost_delay = 10ms

idle_in_transaction_session_timeout = 2h	# in milliseconds, 0 is disabled
vacuum_cost_page_miss = 5		# 0-10000 credits
vacuum_cost_page_dirty = 10		# 0-10000 credits
max_wal_size =48GB
min_wal_size =12GB
max_parallel_maintenance_workers = 4
work_mem = 128MB

##动态参数##
#port = 5432	                                 patroni.yml中配置 	
#max_connections = 2000		                     DCS中配置
shared_buffers = 60GB 			                # shared_buffers 公式： IF use hugepage: 主机内存*(1/4) ELSE: min(32GB, 主机内存*(1/4)) 
#max_prepared_transactions =2000  DCS中配置
maintenance_work_mem = 2GB		               #  公式： min( 8G, (主机内存*1/8)/max_parallel_maintenance_workers )  
